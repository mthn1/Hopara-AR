/*===============================================================================
Copyright (c) 2016 PTC Inc. All Rights Reserved.

Copyright (c) 2012-2014 Qualcomm Connected Experiences, Inc. All Rights Reserved.

Vuforia is a trademark of PTC Inc., registered in the United States and other
countries.
===============================================================================*/

package com.vuforia.samples.SampleApplication.utils;

import java.nio.Buffer;


public class GoldBox extends MeshObject
{

    private Buffer mVertBuff;
    private Buffer mTexCoordBuff;
    private Buffer mNormBuff;
    private Buffer mIndBuff;

    private int indicesNumber = 0;
    private int verticesNumber = 0;


    public GoldBox()
    {
        setVerts();
        setTexCoords();
        setNorms();
        setIndices();
    }


    private void setVerts()
    {
        double[] GoldBox_VERTS = {
                // f 1/1/1 2/2/1 3/3/1
                0.4999998125, -0.5, -0.4999997125,
                0.4999998125, -0.5, 0.4999997875,
                -0.4999997875, -0.5, 0.4999996875,
                // f 1/1/1 3/3/1 4/4/1
                0.4999998125, -0.5, -0.4999997125,
                -0.4999997875, -0.5, 0.4999996875,
                -0.4999995875, -0.5, -0.5000000125,
                // f 5/5/2 8/6/2 7/7/2
                0.5000000125, 0.5, -0.4999995125,
                -0.4999996875, 0.5, -0.4999998125,
                -0.4999999875, 0.5, 0.4999995875,
                // f 5/5/2 7/7/2 6/8/2
                0.5000000125, 0.5, -0.4999995125,
                -0.4999999875, 0.5, 0.4999995875,
                0.4999994125, 0.5, 0.4999999875,
                // f 1/1/3 5/5/3 6/8/3
                0.4999998125, -0.5, -0.4999997125,
                0.5000000125, 0.5, -0.4999995125,
                0.4999994125, 0.5, 0.4999999875,
                // f 1/1/3 6/8/3 2/2/3
                0.4999998125, -0.5, -0.4999997125,
                0.4999994125, 0.5, 0.4999999875,
                0.4999998125, -0.5, 0.4999997875,
                // f 2/2/4 6/9/4 7/10/4
                0.4999998125, -0.5, 0.4999997875,
                0.4999994125, 0.5, 0.4999999875,
                -0.4999999875, 0.5, 0.4999995875,
                // f 2/2/4 7/10/4 3/3/4
                0.4999998125, -0.5, 0.4999997875,
                -0.4999999875, 0.5, 0.4999995875,
                -0.4999997875, -0.5, 0.4999996875,
                // f 3/3/5 7/11/5 8/12/5
                -0.4999997875, -0.5, 0.4999996875,
                -0.4999999875, 0.5, 0.4999995875,
                -0.4999996875, 0.5, -0.4999998125,
                // f 3/3/5 8/12/5 4/4/5
                -0.4999997875, -0.5, 0.4999996875,
                -0.4999996875, 0.5, -0.4999998125,
                -0.4999995875, -0.5, -0.5000000125,
                // f 5/13/6 1/1/6 4/4/6
                0.5000000125, 0.5, -0.4999995125,
                0.4999998125, -0.5, -0.4999997125,
                -0.4999995875, -0.5, -0.5000000125,
                // f 5/13/6 4/4/6 8/14/6
                0.5000000125, 0.5, -0.4999995125,
                -0.4999995875, -0.5, -0.5000000125,
                -0.4999996875, 0.5, -0.4999998125
        };
        mVertBuff = fillBuffer(GoldBox_VERTS);
        verticesNumber = GoldBox_VERTS.length / 3;
    }


    private void setTexCoords()
    {
        double[] GoldBox_TEX_COORDS = {
                // f 1/1/1 2/2/1 3/3/1
                0.500001, 0.500001,
                0.500001, 0.749957,
                0.749957, 0.749957,
                // f 1/1/1 3/3/1 4/4/1
                0.500001, 0.500001,
                0.749957, 0.749957,
                0.749957, 0.500001,
                // f 5/5/2 8/6/2 7/7/2
                0.250045, 0.5,
                0.000087, 0.5,
                0.000087, 0.749958,
                // f 5/5/2 7/7/2 6/8/2
                0.250045, 0.5,
                0.000087, 0.749958,
                0.250044, 0.749957,
                // f 1/1/3 5/5/3 6/8/3
                0.500001, 0.500001,
                0.250045, 0.5,
                0.250044, 0.749957,
                // f 1/1/3 6/8/3 2/2/3
                0.500001, 0.500001,
                0.250044, 0.749957,
                0.500001, 0.749957,
                // f 2/2/4 6/9/4 7/10/4
                0.500001, 0.749957,
                0.500001, 0.999913,
                0.749957, 0.999913,
                // f 2/2/4 7/10/4 3/3/4
                0.500001, 0.749957,
                0.749957, 0.999913,
                0.749957, 0.749957,
                // f 3/3/5 7/11/5 8/12/5
                0.749957, 0.749957,
                0.999913, 0.749957,
                0.999913, 0.500001,
                // f 3/3/5 8/12/5 4/4/5
                0.749957, 0.749957,
                0.999913, 0.500001,
                0.749957, 0.500001,
                // f 5/13/6 1/1/6 4/4/6
                0.500001, 0.250045,
                0.500001, 0.500001,
                0.749957, 0.500001,
                // f 5/13/6 4/4/6 8/14/6
                0.500001, 0.250045,
                0.749957, 0.500001,
                0.749957, 0.250045
        };
        mTexCoordBuff = fillBuffer(GoldBox_TEX_COORDS);

    }


    private void setNorms()
    {
        double[] GoldBox_NORMS = {
                // f 1/1/1 2/2/1 3/3/1
                0, -1, 0,
                0, -1, 0,
                0, -1, 0,
                // f 1/1/1 3/3/1 4/4/1
                0, -1, 0,
                0, -1, 0,
                0, -1, 0,
                // f 5/5/2 8/6/2 7/7/2
                0, 1, 0,
                0, 1, 0,
                0, 1, 0,
                // f 5/5/2 7/7/2 6/8/2
                0, 1, 0,
                0, 1, 0,
                0, 1, 0,
                // f 1/1/3 5/5/3 6/8/3
                1, 0, 0,
                1, 0, 0,
                1, 0, 0,
                // f 1/1/3 6/8/3 2/2/3
                1, 0, 0,
                1, 0, 0,
                1, 0, 0,
                // f 2/2/4 6/9/4 7/10/4
                0, 0, 1,
                0, 0, 1,
                0, 0, 1,
                // f 2/2/4 7/10/4 3/3/4
                0, 0, 1,
                0, 0, 1,
                0, 0, 1,
                // f 3/3/5 7/11/5 8/12/5
                -1, 0, 0,
                -1, 0, 0,
                -1, 0, 0,
                // f 3/3/5 8/12/5 4/4/5
                -1, 0, 0,
                -1, 0, 0,
                -1, 0, 0,
                // f 5/13/6 1/1/6 4/4/6
                0, 0, -1,
                0, 0, -1,
                0, 0, -1,
                // f 5/13/6 4/4/6 8/14/6
                0, 0, -1,
                0, 0, -1,
                0, 0, -1
        };
        mNormBuff = fillBuffer(GoldBox_NORMS);
    }


    private void setIndices()
    {
        // should be short but changed to int
        short[] GoldBox_INDICES = {
                1,2,3,
                1,3,4,
                5,8,7,
                5,7,6,
                1,5,6,
                1,6,2,
                2,6,7,
                2,7,3,
                3,7,8,
                3,8,4,
                5,1,4,
                5,4,8
        };
        mIndBuff = fillBuffer(GoldBox_INDICES);
        indicesNumber = GoldBox_INDICES.length;
    }


    public int getNumObjectIndex()
    {
        return indicesNumber;
    }


    @Override
    public int getNumObjectVertex()
    {
        return verticesNumber;
    }


    @Override
    public Buffer getBuffer(BUFFER_TYPE bufferType)
    {
        Buffer result = null;
        switch (bufferType)
        {
            case BUFFER_TYPE_VERTEX:
                result = mVertBuff;
                break;
            case BUFFER_TYPE_TEXTURE_COORD:
                result = mTexCoordBuff;
                break;
            case BUFFER_TYPE_NORMALS:
                result = mNormBuff;
                break;
            case BUFFER_TYPE_INDICES:
                result = mIndBuff;
            default:
                break;

        }

        return result;
    }

}
